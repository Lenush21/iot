/*
 * IOTest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.example.iot.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * IotAppWeatherForecast
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-09-19T17:32:14.018607400+04:00[Europe/Samara]")
public class IotAppWeatherForecast {
  @SerializedName("date")
  private OffsetDateTime date = null;

  @SerializedName("temperatureC")
  private Integer temperatureC = null;

  @SerializedName("temperatureF")
  private Integer temperatureF = null;

  @SerializedName("summary")
  private String summary = null;

  public IotAppWeatherForecast date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @Schema(description = "")
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }

  public IotAppWeatherForecast temperatureC(Integer temperatureC) {
    this.temperatureC = temperatureC;
    return this;
  }

   /**
   * Get temperatureC
   * @return temperatureC
  **/
  @Schema(description = "")
  public Integer getTemperatureC() {
    return temperatureC;
  }

  public void setTemperatureC(Integer temperatureC) {
    this.temperatureC = temperatureC;
  }

   /**
   * Get temperatureF
   * @return temperatureF
  **/
  @Schema(description = "")
  public Integer getTemperatureF() {
    return temperatureF;
  }

  public IotAppWeatherForecast summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(description = "")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotAppWeatherForecast iotAppWeatherForecast = (IotAppWeatherForecast) o;
    return Objects.equals(this.date, iotAppWeatherForecast.date) &&
        Objects.equals(this.temperatureC, iotAppWeatherForecast.temperatureC) &&
        Objects.equals(this.temperatureF, iotAppWeatherForecast.temperatureF) &&
        Objects.equals(this.summary, iotAppWeatherForecast.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, temperatureC, temperatureF, summary);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotAppWeatherForecast {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    temperatureC: ").append(toIndentedString(temperatureC)).append("\n");
    sb.append("    temperatureF: ").append(toIndentedString(temperatureF)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
